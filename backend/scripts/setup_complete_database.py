#!/usr/bin/env python3
"""
Script completo para recriar o banco de dados do CareFlow
Este script:
1. Recria todas as tabelas (APAGA TODOS OS DADOS!)
2. Cria o usu√°rio administrador
3. Cria os m√≥dulos padr√£o do sistema
4. Cria as 2 empresas de exemplo
5. Migra os procedimentos do JSON
"""
import os
import sys
import secrets
import string
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.orm import Session
from app.core.database import SessionLocal, engine
from app.models.user import Base, User, UserRole
from app.models.empresa import Empresa
from app.models.modulo import Modulo
from app.models.procedimento import Procedimento
from app.models.insumo import Insumo
from app.models.associations import ProcedimentoInsumo
from app.services.user_service import UserService
from app.services.empresa_service import EmpresaService
from app.services.modulo_service import ModuloService
from app.schemas.user import UserCreate
from app.schemas.empresa import EmpresaCreate
from app.schemas.modulo import ModuloCreate


def generate_secure_password(length: int = 12) -> str:
    """Gerar senha segura com requisitos m√≠nimos"""
    # Caracteres que atendem aos requisitos
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    symbols = "!@#$%^&*"
    
    # Garantir pelo menos um de cada tipo
    password = [
        secrets.choice(lowercase),
        secrets.choice(uppercase),
        secrets.choice(digits),
        secrets.choice(symbols)
    ]
    
    # Completar com caracteres aleat√≥rios
    all_chars = lowercase + uppercase + digits + symbols
    password.extend(secrets.choice(all_chars) for _ in range(length - 4))
    
    # Embaralhar a senha
    password_list = list(password)
    secrets.SystemRandom().shuffle(password_list)
    
    return ''.join(password_list)


def associate_admin_to_all_entities(db: Session, admin_user: User):
    """Associar admin a todas as empresas e m√≥dulos"""
    print("üîó Associando admin a todas as entidades...")
    
    # Associar a todas as empresas
    from app.models.empresa import Empresa
    from app.models.associations import user_empresa
    
    empresas = db.query(Empresa).all()
    for empresa in empresas:
        db.execute(
            user_empresa.insert().values(
                user_id=admin_user.id,
                empresa_id=empresa.id
            )
        )
    
    # Associar a todos os m√≥dulos
    from app.models.modulo import Modulo
    from app.models.associations import user_modulo
    
    modulos = db.query(Modulo).all()
    for modulo in modulos:
        db.execute(
            user_modulo.insert().values(
                user_id=admin_user.id,
                modulo_id=modulo.id
            )
        )
    
    db.commit()
    print(f"  ‚úÖ Admin associado a {len(empresas)} empresas e {len(modulos)} m√≥dulos")


def recreate_database():
    """Recriar banco de dados"""
    print("üóÑÔ∏è  Recriando banco de dados...")
    
    from app.core.database import engine, Base
    from app.models.user import User
    from app.models.empresa import Empresa
    from app.models.modulo import Modulo
    from app.models.procedimento import Procedimento
    from app.models.insumo import Insumo
    
    # Drop e recriar todas as tabelas
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    
    print("  ‚úÖ Banco de dados recriado")


def create_admin_user(db: Session):
    """Criar usu√°rio administrador com senha segura"""
    print("üë§ Criando usu√°rio administrador...")
    
    user_service = UserService(db)
    
    # Gerar senha segura
    admin_password = generate_secure_password()
    
    admin_data = UserCreate(
        email="admin@careflow.com",
        full_name="Administrador do Sistema",
        password=admin_password,
        role=UserRole.ADMIN
    )
    
    admin_user = user_service.create_user(admin_data, setup_default_permissions=True)
    
    if admin_user:
        print(f"  ‚úÖ Admin criado: {admin_user.email}")
        print("  üîë CREDENCIAIS DE ACESSO:")
        print(f"     Email: admin@careflow.com")
        print(f"     Senha: {admin_password}")
        print("  ‚ö†Ô∏è  IMPORTANTE: Guarde essas credenciais!")
        print("  ‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!")
    else:
        print("‚ùå Erro ao criar admin")
        return None
    
    return admin_user, admin_password


def create_initial_modules(db: Session):
    """Criar m√≥dulos iniciais do sistema"""
    print("üìã Criando m√≥dulos iniciais...")
    
    modulo_service = ModuloService(db)
    
    modulos_iniciais = [
        {
            "nome": "Portf√≥lio",
            "slug": "portfolio",
            "descricao": "Visualizar portf√≥lio de procedimentos",
            "icone": "folder",
            "ordem": 1,
            "is_admin_only": False
        },
        {
            "nome": "Calculadora",
            "slug": "calculadora", 
            "descricao": "Calcular custos e margens de procedimentos",
            "icone": "calculator",
            "ordem": 2,
            "is_admin_only": False
        },
        {
            "nome": "Gerenciar Usu√°rios",
            "slug": "admin_usuarios",
            "descricao": "Administrar usu√°rios e permiss√µes",
            "icone": "users",
            "ordem": 10,
            "is_admin_only": True
        },
        {
            "nome": "Gerenciar Empresas",
            "slug": "admin_empresas",
            "descricao": "Administrar empresas do sistema",
            "icone": "building",
            "ordem": 11,
            "is_admin_only": True
        },
        {
            "nome": "Configura√ß√µes",
            "slug": "configuracoes",
            "descricao": "Configura√ß√µes gerais do sistema",
            "icone": "settings",
            "ordem": 20,
            "is_admin_only": True
        }
    ]
    
    created_count = 0
    for modulo_data in modulos_iniciais:
        modulo_create = ModuloCreate(**modulo_data)
        modulo = modulo_service.create_modulo(modulo_create)
        if modulo:
            print(f"  ‚úÖ M√≥dulo '{modulo.nome}' criado")
            created_count += 1
        else:
            print(f"  ‚ùå Erro ao criar m√≥dulo '{modulo_data['nome']}'")
    
    print(f"üìã {created_count} m√≥dulos criados")


def create_sample_empresas(db: Session):
    """Criar as 2 empresas padr√£o"""
    print("üè¢ Criando empresas padr√£o...")
    
    empresa_service = EmpresaService(db)
    
    empresas_padrao = [
        {
            "nome": "Gio Est√©tica Avan√ßada",
            "razao_social": "Gio Est√©tica Avan√ßada LTDA",
            "cnpj": "12.345.678/0001-90",
            "email": "contato@gioestetica.com.br",
            "telefone": "(11) 99999-9999",
            "endereco": "Rua das Flores, 123 - S√£o Paulo/SP"
        },
        {
            "nome": "Sorridents",
            "razao_social": "Sorridents Odontologia LTDA",
            "cnpj": "98.765.432/0001-10",
            "email": "contato@sorridents.com.br",
            "telefone": "(11) 88888-8888",
            "endereco": "Avenida Paulista, 456 - S√£o Paulo/SP"
        }
    ]
    
    created_count = 0
    for empresa_data in empresas_padrao:
        empresa_create = EmpresaCreate(**empresa_data)
        empresa = empresa_service.create_empresa(empresa_create)
        if empresa:
            print(f"  ‚úÖ Empresa '{empresa.nome}' criada")
            created_count += 1
        else:
            print(f"  ‚ùå Erro ao criar empresa '{empresa_data['nome']}'")
    
    print(f"üè¢ {created_count} empresas criadas")


def migrate_procedures_from_json(db: Session):
    """Migrar procedimentos do JSON existente"""
    print("üîÑ Migrando procedimentos do JSON...")
    
    # Importar e executar a migra√ß√£o
    try:
        from migrate_procedures import migrate_procedures
        success = migrate_procedures(db)
        
        if success:
            # Estat√≠sticas
            total_procedimentos = db.query(Procedimento).count()
            total_insumos = db.query(Insumo).count()
            total_associacoes = db.query(ProcedimentoInsumo).count()
            
            print(f"‚úÖ Migra√ß√£o conclu√≠da!")
            print(f"   üìã {total_procedimentos} procedimentos")
            print(f"   üì¶ {total_insumos} insumos")
            print(f"   üîó {total_associacoes} associa√ß√µes")
        else:
            print("‚ùå Falha na migra√ß√£o de procedimentos")
            
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o: {e}")
        print("‚ö†Ô∏è  Continuando sem migra√ß√£o de procedimentos...")


def main():
    """Executar setup completo do banco de dados"""
    print("üöÄ SETUP COMPLETO DO BANCO DE DADOS - CareFlow")
    print("=" * 60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este script VAI APAGAR TODOS OS DADOS EXISTENTES!")
    print("=" * 60)
    
    # Confirma√ß√£o
    response = input("\n‚ùì Deseja continuar? (digite 'SIM' para confirmar): ")
    if response.upper() != 'SIM':
        print("‚ùå Opera√ß√£o cancelada.")
        return False
    
    print("\nüîÑ Iniciando setup completo...\n")
    
    try:
        # 1. Recriar banco
        recreate_database()
        print()
        
        # 2. Criar sess√£o
        db = SessionLocal()
        
        try:
            # 3. Criar usu√°rio admin
            admin_user, admin_password = create_admin_user(db)
            if not admin_user:
                print("‚ùå Falha cr√≠tica: n√£o foi poss√≠vel criar usu√°rio admin")
                return False
            print()
            
            # 4. Criar m√≥dulos
            create_initial_modules(db)
            print()
            
            # 5. Criar empresas
            create_sample_empresas(db)
            print()
            
            # 6. Migrar procedimentos
            migrate_procedures_from_json(db)
            print()
            
            # 7. Associar admin a todas as empresas e m√≥dulos
            print("üîó Associando admin a todas as empresas e m√≥dulos...")
            associate_admin_to_all_entities(db, admin_user)
            print("‚úÖ Admin associado a todas as empresas e m√≥dulos")
            print()
            
            print("üéâ SETUP COMPLETO CONCLU√çDO COM SUCESSO!")
            print("=" * 60)
            print("üìã Resumo do que foi criado:")
            print("   ‚úÖ Banco de dados recriado")
            print("   ‚úÖ Usu√°rio administrador criado")
            print("   ‚úÖ M√≥dulos do sistema criados")
            print("   ‚úÖ Empresas padr√£o criadas")
            print("   ‚úÖ Procedimentos migrados do JSON")
            
            print("\nüîë Credenciais de acesso:")
            print("   Email: admin@careflow.com")
            print("   Senha: (senha gerada automaticamente)")
            
            print("\n‚ö†Ô∏è  PR√ìXIMOS PASSOS:")
            print("   1. Altere a senha do administrador")
            print("   2. Configure as empresas conforme necess√°rio")
            print("   3. Para popular com nova planilha, use o script de migra√ß√£o espec√≠fico")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico durante setup: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)